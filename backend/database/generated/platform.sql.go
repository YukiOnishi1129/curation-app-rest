// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: platform.sql

package persistence

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlatforms = `-- name: CreatePlatforms :one
INSERT INTO platforms (
  name, site_url, platform_site_type, favicon_url
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, site_url, platform_site_type, favicon_url, created_at, updated_at, deleted_at
`

type CreatePlatformsParams struct {
	Name             string
	SiteUrl          string
	PlatformSiteType int32
	FaviconUrl       string
}

func (q *Queries) CreatePlatforms(ctx context.Context, arg CreatePlatformsParams) (Platform, error) {
	row := q.db.QueryRow(ctx, createPlatforms,
		arg.Name,
		arg.SiteUrl,
		arg.PlatformSiteType,
		arg.FaviconUrl,
	)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SiteUrl,
		&i.PlatformSiteType,
		&i.FaviconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePlatforms = `-- name: DeletePlatforms :exec
DELETE FROM platforms
WHERE id = $1
`

func (q *Queries) DeletePlatforms(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePlatforms, id)
	return err
}

const getPlatform = `-- name: GetPlatform :one
SELECT id, name, site_url, platform_site_type, favicon_url, created_at, updated_at, deleted_at FROM platforms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlatform(ctx context.Context, id pgtype.UUID) (Platform, error) {
	row := q.db.QueryRow(ctx, getPlatform, id)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SiteUrl,
		&i.PlatformSiteType,
		&i.FaviconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listPlatforms = `-- name: ListPlatforms :many
SELECT id, name, site_url, platform_site_type, favicon_url, created_at, updated_at, deleted_at FROM platforms
ORDER BY name
`

func (q *Queries) ListPlatforms(ctx context.Context) ([]Platform, error) {
	rows, err := q.db.Query(ctx, listPlatforms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Platform
	for rows.Next() {
		var i Platform
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SiteUrl,
			&i.PlatformSiteType,
			&i.FaviconUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlatforms = `-- name: UpdatePlatforms :exec
UPDATE platforms
  set name = $2,
  site_url = $3,
  platform_site_type = $4,
  favicon_url = $5
WHERE id = $1
`

type UpdatePlatformsParams struct {
	ID               pgtype.UUID
	Name             string
	SiteUrl          string
	PlatformSiteType int32
	FaviconUrl       string
}

func (q *Queries) UpdatePlatforms(ctx context.Context, arg UpdatePlatformsParams) error {
	_, err := q.db.Exec(ctx, updatePlatforms,
		arg.ID,
		arg.Name,
		arg.SiteUrl,
		arg.PlatformSiteType,
		arg.FaviconUrl,
	)
	return err
}
